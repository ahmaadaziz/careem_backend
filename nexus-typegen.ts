/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./src/context"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Captain: { // root type
    id: string; // ID!
    profile: NexusGenRootTypes['Profile']; // Profile!
    profileId: number; // Int!
    rating?: number | null; // Int
  }
  Mutation: {};
  Profile: { // root type
    address: string; // String!
    email: string; // String!
    gender: string; // String!
    id: string; // ID!
    name: string; // String!
    phone: string; // String!
  }
  Query: {};
  Rating: { // root type
    captain: NexusGenRootTypes['Captain']; // Captain!
    captainId: number; // Int!
    id: string; // ID!
    rating: number; // Int!
    user: NexusGenRootTypes['User']; // User!
    userId: number; // Int!
  }
  Ride: { // root type
    captain: NexusGenRootTypes['Captain']; // Captain!
    captainId: number; // Int!
    dropOffAddress: string; // String!
    id: string; // ID!
    rating: NexusGenRootTypes['Rating']; // Rating!
    ratingId: number; // Int!
    startAddress: string; // String!
    user: NexusGenRootTypes['User']; // User!
    userId: number; // Int!
    vehicle: NexusGenRootTypes['Vehicle']; // Vehicle!
    vehicleId: number; // Int!
  }
  User: { // root type
    id: string; // ID!
    profile: NexusGenRootTypes['Profile']; // Profile!
    profileId: number; // Int!
  }
  Vehicle: { // root type
    captain: NexusGenRootTypes['Captain']; // Captain!
    captainId: number; // Int!
    color: string; // String!
    id: string; // ID!
    make: string; // String!
    model: string; // String!
    plateNumber: string; // String!
    year: number; // Int!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Captain: { // field return type
    id: string; // ID!
    profile: NexusGenRootTypes['Profile']; // Profile!
    profileId: number; // Int!
    rating: number | null; // Int
  }
  Mutation: { // field return type
    createCaptain: NexusGenRootTypes['Captain']; // Captain!
    createRide: NexusGenRootTypes['Ride']; // Ride!
    createUser: NexusGenRootTypes['User']; // User!
    createVehicle: NexusGenRootTypes['Vehicle']; // Vehicle!
  }
  Profile: { // field return type
    address: string; // String!
    email: string; // String!
    gender: string; // String!
    id: string; // ID!
    name: string; // String!
    phone: string; // String!
  }
  Query: { // field return type
    getCaptain: NexusGenRootTypes['Captain']; // Captain!
    getRating: NexusGenRootTypes['Rating']; // Rating!
    getUser: NexusGenRootTypes['User']; // User!
    getVehicle: NexusGenRootTypes['Vehicle']; // Vehicle!
  }
  Rating: { // field return type
    captain: NexusGenRootTypes['Captain']; // Captain!
    captainId: number; // Int!
    id: string; // ID!
    rating: number; // Int!
    user: NexusGenRootTypes['User']; // User!
    userId: number; // Int!
  }
  Ride: { // field return type
    captain: NexusGenRootTypes['Captain']; // Captain!
    captainId: number; // Int!
    dropOffAddress: string; // String!
    fare: number | null; // Int
    id: string; // ID!
    rating: NexusGenRootTypes['Rating']; // Rating!
    ratingId: number; // Int!
    startAddress: string; // String!
    user: NexusGenRootTypes['User']; // User!
    userId: number; // Int!
    vehicle: NexusGenRootTypes['Vehicle']; // Vehicle!
    vehicleId: number; // Int!
  }
  User: { // field return type
    id: string; // ID!
    profile: NexusGenRootTypes['Profile']; // Profile!
    profileId: number; // Int!
  }
  Vehicle: { // field return type
    captain: NexusGenRootTypes['Captain']; // Captain!
    captainId: number; // Int!
    color: string; // String!
    id: string; // ID!
    make: string; // String!
    model: string; // String!
    plateNumber: string; // String!
    year: number; // Int!
  }
}

export interface NexusGenFieldTypeNames {
  Captain: { // field return type name
    id: 'ID'
    profile: 'Profile'
    profileId: 'Int'
    rating: 'Int'
  }
  Mutation: { // field return type name
    createCaptain: 'Captain'
    createRide: 'Ride'
    createUser: 'User'
    createVehicle: 'Vehicle'
  }
  Profile: { // field return type name
    address: 'String'
    email: 'String'
    gender: 'String'
    id: 'ID'
    name: 'String'
    phone: 'String'
  }
  Query: { // field return type name
    getCaptain: 'Captain'
    getRating: 'Rating'
    getUser: 'User'
    getVehicle: 'Vehicle'
  }
  Rating: { // field return type name
    captain: 'Captain'
    captainId: 'Int'
    id: 'ID'
    rating: 'Int'
    user: 'User'
    userId: 'Int'
  }
  Ride: { // field return type name
    captain: 'Captain'
    captainId: 'Int'
    dropOffAddress: 'String'
    fare: 'Int'
    id: 'ID'
    rating: 'Rating'
    ratingId: 'Int'
    startAddress: 'String'
    user: 'User'
    userId: 'Int'
    vehicle: 'Vehicle'
    vehicleId: 'Int'
  }
  User: { // field return type name
    id: 'ID'
    profile: 'Profile'
    profileId: 'Int'
  }
  Vehicle: { // field return type name
    captain: 'Captain'
    captainId: 'Int'
    color: 'String'
    id: 'ID'
    make: 'String'
    model: 'String'
    plateNumber: 'String'
    year: 'Int'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createCaptain: { // args
      address: string; // String!
      email: string; // String!
      gender: string; // String!
      name: string; // String!
      phone: string; // String!
      rating?: number | null; // Int
    }
    createRide: { // args
      captainId: number; // Int!
      dropOffAddress: string; // String!
      startAddress: string; // String!
      userId: number; // Int!
      vehicleId: number; // Int!
    }
    createUser: { // args
      address: string; // String!
      email: string; // String!
      gender: string; // String!
      name: string; // String!
      phone: string; // String!
    }
    createVehicle: { // args
      captainId: number; // Int!
      color: string; // String!
      make: string; // String!
      model: string; // String!
      plateNumber: string; // String!
      year: number; // Int!
    }
  }
  Query: {
    getCaptain: { // args
      id: number; // Int!
    }
    getRating: { // args
      id: number; // Int!
    }
    getUser: { // args
      id: number; // Int!
    }
    getVehicle: { // args
      id: number; // Int!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}